#[cfg(test)]
#[test]
fn str_0x08372aa2() {
    use crate::Compiler;

    let s = r"データがありません";

    let expected: Vec<u8> = vec![0x9c, 0xec, 0x94, 0x30, 0x26, 0x6e, 0x62, 0x3f, 0x75, 0xff];

    let mut c = Compiler::new(false);
    let mut actual: Vec<u8> = Vec::new();
    c.compile(s, &mut actual);
    assert_eq!(actual, expected);
}

#[test]
fn str_0x0837338f() {
    use crate::Compiler;

    let s = r"✚ボタンでえらんで Aボタンをおしてください";

    let expected: Vec<u8> = vec![
        0xda, 0xdc, 0xb1, 0x94, 0xc6, 0x4b, 0x2c, 0x6d, 0x75, 0x4b, 0x00, 0x0b, 0xb1, 0x94, 0xc6,
        0x74, 0x2e, 0x3b, 0x4a, 0x33, 0x44, 0x39, 0x28, 0xff,
    ];

    let mut c = Compiler::new(false);
    let mut actual: Vec<u8> = Vec::new();
    c.compile(s, &mut actual);
    assert_eq!(actual, expected);
}

#[test]
fn test_0x0837739c() {
    use crate::Compiler;

    let s = r"<ルージュ>
  ジュンビは、よろしいでしょうか？
    はい
    いいえ";

    let expected: Vec<u8> = vec![
        0xF3, 0x62, 0x8D, 0xBA, 0xC6, 0xA8, 0x53, 0xD5, 0x6C, 0x71, 0x3B, 0x28, 0x4B, 0x3B, 0x6B,
        0x2A, 0x2F, 0xDD, 0xFC, 0x00, 0x00, 0x53, 0x28, 0xFC, 0x00, 0x00, 0x28, 0x28, 0x2C, 0xFF,
    ];

    let mut c = Compiler::new(true);
    let mut actual: Vec<u8> = Vec::new();
    c.compile(s, &mut actual);
    assert_eq!(actual, expected);
}

#[test]
fn test_0x08384bb4() {
    use crate::Compiler;

    let s = r"<r:ジョーヌ>
  ゼロさんが今までカイシュウされた
  データの入力....▼

  今、終わりました▼

<ルージュ>
  カイセキにうつります";

    let expected: Vec<u8> = vec![
        0xF3, 0x61, 0x91, 0xC2, 0x39, 0x75, 0x30, 0xF0, 0xA5, 0x62, 0x4B, 0x80, 0x79, 0x8C, 0xBA,
        0x7B, 0x39, 0x70, 0x43, 0xFC, 0x9C, 0xEC, 0x94, 0x52, 0xF0, 0x51, 0xF0, 0x02, 0xE4, 0xE4,
        0xFD, 0xF0, 0xA5, 0xD5, 0xF0, 0x36, 0x73, 0x6E, 0x62, 0x3B, 0x43, 0xFD, 0xF3, 0x62, 0x80,
        0x79, 0x90, 0x82, 0x4F, 0x2A, 0x48, 0x6E, 0x62, 0x3D, 0xFF,
    ];

    let mut c = Compiler::new(true);
    let mut actual: Vec<u8> = Vec::new();
    c.compile(s, &mut actual);
    assert_eq!(actual, expected);
}

#[test]
fn test_0x0837cb6e() {
    use crate::Compiler;

    let s = r"<NO_MUGSHOT>
  <OPTION>
  ナニニツイテ シラベマスカ？
    オメガについて
    ドクター・バイルについて
    <ANSWER>
      オメガハ ダークエルフト
      同ジ ハンノウヲ モツ
      ナゾノ 巨大レプリロイドデス▼

      アノ ヨウセイ戦争モ
      オメガガ カカワッテイルト
      イワレテイマス▼

      100年チカク前ニ
      ウチュウニ ツイホウサレタト
      シルサレテイマスガ..▼

      ソレ以上ノコトハ データ不足デス
    <ANSWER>
      ソレデハ シュウリョウシマス
    <ANSWER>
      ドクター・バイルハ 100年前
      ダークエルフヲ 利用シテ
      ヨウセイ戦争ヲ ヒキオコシ..▼

      ネオ・アルカディアヲ
      ツイホウサレマシタ▼

      イチド死ンダ レプリロイドヲ
      フッカツサセル ギジュツニ
      スグレタ 科学者デス";

    let expected: Vec<u8> = vec![
        0xF3, 0x02, 0xF6, 0x02, 0x9F, 0xA0, 0xA0, 0x99, 0x79, 0x9B, 0x00, 0x8C, 0xBE, 0xAE, 0xB3,
        0x8E, 0x80, 0xDD, 0xFC, 0x00, 0x00, 0x7F, 0xB6, 0x81, 0x4F, 0x48, 0x28, 0x4A, 0xFC, 0x00,
        0x00, 0x9E, 0x84, 0x94, 0xEC, 0xEA, 0xA5, 0x79, 0xC0, 0x4F, 0x48, 0x28, 0x4A, 0xFD, 0x7F,
        0xB6, 0x81, 0xA4, 0x00, 0x95, 0xEC, 0x84, 0x7D, 0xC0, 0xAA, 0x9D, 0xFC, 0xF0, 0x2E, 0x8D,
        0x00, 0xA4, 0xC6, 0xA3, 0x7B, 0xC5, 0x00, 0xB7, 0x99, 0xFC, 0x9F, 0x93, 0xA3, 0x00, 0xF0,
        0x92, 0xF0, 0x32, 0xC1, 0xAC, 0xBF, 0xC2, 0x79, 0x9E, 0x9C, 0x8E, 0xFD, 0x77, 0xA3, 0x00,
        0xBD, 0x7B, 0x90, 0x79, 0xF0, 0x69, 0xF0, 0x6A, 0xB7, 0xFC, 0x7F, 0xB6, 0x81, 0x81, 0x00,
        0x80, 0x80, 0xC4, 0x98, 0x9B, 0x79, 0xC0, 0x9D, 0xFC, 0x79, 0xC4, 0xC1, 0x9B, 0x79, 0xB3,
        0x8E, 0xFD, 0x02, 0x01, 0x01, 0xF0, 0x09, 0x96, 0x80, 0x84, 0xF0, 0x58, 0xA0, 0xFC, 0x7B,
        0x96, 0xBA, 0x7B, 0xA0, 0x00, 0x99, 0x79, 0xB0, 0x7B, 0x8A, 0xC1, 0x94, 0x9D, 0xFC, 0x8C,
        0xC0, 0x8A, 0xC1, 0x9B, 0x79, 0xB3, 0x8E, 0x81, 0xE4, 0xFD, 0x92, 0xC1, 0xF0, 0x82, 0xF0,
        0x3D, 0xA3, 0x88, 0x9D, 0xA4, 0x00, 0x9C, 0xEC, 0x94, 0xF0, 0x16, 0xF0, 0xA9, 0x9C, 0x8E,
        0xFE, 0xF4, 0x01, 0x92, 0xC1, 0x9C, 0xA4, 0x00, 0x8C, 0xBA, 0x7B, 0xBF, 0xBC, 0x7B, 0x8C,
        0xB3, 0x8E, 0xFE, 0xF4, 0x02, 0x9E, 0x84, 0x94, 0xEC, 0xEA, 0xA5, 0x79, 0xC0, 0xA4, 0x00,
        0x02, 0x01, 0x01, 0xF0, 0x09, 0xF0, 0x58, 0xFC, 0x95, 0xEC, 0x84, 0x7D, 0xC0, 0xAA, 0xC5,
        0x00, 0xF0, 0x9E, 0xF0, 0x7D, 0x8C, 0x9B, 0xFC, 0xBD, 0x7B, 0x90, 0x79, 0xF0, 0x69, 0xF0,
        0x6A, 0xC5, 0x00, 0xA7, 0x82, 0x7F, 0x88, 0x8C, 0xE4, 0xFD, 0xA2, 0x7F, 0xEA, 0x77, 0xC0,
        0x80, 0x9C, 0x78, 0x77, 0xC5, 0xFC, 0x99, 0x79, 0xB0, 0x7B, 0x8A, 0xC1, 0xB3, 0x8C, 0x94,
        0xFD, 0x79, 0x96, 0x9E, 0xF0, 0x2B, 0xC6, 0x95, 0x00, 0xC1, 0xAC, 0xBF, 0xC2, 0x79, 0x9E,
        0xC5, 0xFC, 0xAA, 0x98, 0x80, 0x99, 0x8A, 0x90, 0xC0, 0x00, 0x83, 0x8D, 0xBA, 0x99, 0xA0,
        0xFC, 0x8E, 0x85, 0xC1, 0x94, 0x00, 0xF0, 0x2C, 0xF0, 0x2D, 0xF0, 0x76, 0x9C, 0x8E, 0xFF,
    ];

    let mut c = Compiler::new(true);
    let mut actual: Vec<u8> = Vec::new();
    c.compile(s, &mut actual);
    let size = if actual.len() > expected.len() {
        expected.len()
    } else {
        actual.len()
    };
    for i in 0..size {
        if actual[i] != expected[i] {
            println!(
                "idx: {}, actual: 0x{:02X}, expected: 0x{:02X}",
                i, actual[i], expected[i]
            );
            break;
        }
    }
    assert_eq!(actual, expected);
}
